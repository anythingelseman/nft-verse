/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.2.16 public/nft_gallery.glb --types 
*/

import * as THREE from "three";
import React, { useRef } from "react";
import { useGLTF } from "@react-three/drei";
import { GLTF } from "three-stdlib";

type GLTFResult = GLTF & {
  nodes: {
    Structure: THREE.Mesh;
    Wall: THREE.Mesh;
  };
  materials: {
    Baked: THREE.MeshBasicMaterial;
  };
};

type ContextType = Record<
  string,
  React.ForwardRefExoticComponent<JSX.IntrinsicElements["mesh"]>
>;

type GroupProps = JSX.IntrinsicElements["group"];

interface GalleryProps extends GroupProps {
  numGallery: number;
}

export default function Gallery(props: GalleryProps) {
  const { nodes, materials } = useGLTF("/nft_gallery.glb") as GLTFResult;

  const structures = Array.from({ length: props.numGallery }).map(
    (_, index) => (
      <mesh
        key={index}
        geometry={nodes.Structure.geometry}
        material={materials.Baked}
        position={[index * 16, 0, 0.05]}
      />
    )
  );

  const wallXPosition = (props.numGallery - 1) * 16;

  return (
    <group {...props} dispose={null}>
      <group scale={0.01}>
        <group rotation={[-Math.PI / 2, 0, 0]} scale={100}>
          {structures}
          <mesh
            geometry={nodes.Wall.geometry}
            material={materials.Baked}
            position={[0, 0, 0.05]}
          />
          <mesh
            geometry={nodes.Wall.geometry}
            material={materials.Baked}
            position={[wallXPosition, 0, 0.05]}
            rotation={[0, 0, Math.PI]}
          />
        </group>
      </group>
    </group>
  );
}

useGLTF.preload("/nft_gallery.glb");
